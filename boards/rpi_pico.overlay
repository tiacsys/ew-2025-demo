#include <zephyr/dt-bindings/input/input-event-codes.h>

/* Aliases for the devices used in the demo, this allows them to be used without
   knowing the exact hardware configuration */
/ {
	aliases {
		input-device = &potentiometer_input;
		stepper-motor = &drv8424;
	};
};

/ {
	soc{
		/* Timer used to generate step signals for the stepper motor */
		rpi_pico_pit_controller: rpi_pico_pit_controller {
			status = "okay";
			compatible = "raspberrypi,pico-pit";
			clocks = <&clocks 0x5>;
			interrupts = <0x4 0x3>;
			interrupt-names = "PWM_IRQ_WRAP";
			#pico-pit-controller-cells = <0>;

			rpi_pico_pit_channel: rpi_pico_pit_channel {
				status = "okay";
				compatible = "raspberrypi,pico-pit-channel";
				pwm_slice = <3>;

				#pico-pit-channel-cells = <0>;
			};
		};
	};


};

 &i2c1 {
 	status = "okay";
	/* Configuration of the extension board that houses the stepper motor controller */
 	mikroe_stepper_gpios: mikroe_stepper_ctrl_tca9538a@70 {
 		status = "okay";
 		compatible = "ti,tca9538";

 		reg = < 0x70 >;

 		gpio-controller;
 		ngpios = < 8 >;
 		#gpio-cells = < 2 >;

 		gpio-reserved-ranges = < 7 1 >;

 		gpio-line-names =
 			"M0",
 			"M1",
 			"DEC0",
 			"DEC1",
 			"TOFF",
 			"STP",
 			"DIR";
 	};
 };

/ {

	/* Configuration of the stepper motor river, a DRV8424 */
	drv8424: drv8424 {
		status = "okay";
		compatible = "ti,drv8424";


		dir-gpios = < &gpio0 20 0 >;
		step-gpios = < &gpio0 19 0 >;
		sleep-gpios = < &gpio0 21 GPIO_ACTIVE_LOW >;
		en-gpios  = < &gpio0 18 0 >;
		m0-gpios = < &mikroe_stepper_gpios 0 0 >;
		m1-gpios = < &mikroe_stepper_gpios 1 0 >;
		/* Timing source to generate the step signal. This one uses a counter to generate
		   the signal and features acceleration */
		timing-source = "counter-accel";

		/* Timing source configuration */
		counter = <&rpi_pico_pit_channel>;
		acceleration = <1600>;
		accurate-steps = <15>;

		#address-cells = < 1 >;
		#size-cells = < 0 >;
		#stepper-motor-cells = < 0 >;

	};

	/* Configuration of the input device, in this a case a potentiometer whose range has
	   been divided into 4 discrete areas, each mapped to a key */
	potentiometer_input: potentiometer_input {
                compatible = "adc-keys";
                keyup-threshold-mv = <10000>;
                io-channels = <&adc 0>;
                sample-period-ms = <50>;

		/* Key selection is based on the threshold that is closest to the current
		   potentiometer value instead of defining borders. */
                potentiometer_key_1: potentiometer_key_1 {
                        zephyr,code = <INPUT_KEY_1>;
                        press-thresholds-mv = <413>;
                };
                potentiometer_key_2: potentiometer_key_2 {
                        zephyr,code = <INPUT_KEY_2>;
                        press-thresholds-mv = <1237>;
                };
                potentiometer_key_3: potentiometer_key_3 {
                        zephyr,code = <INPUT_KEY_3>;
                        press-thresholds-mv = <2062>;
                };
                potentiometer_key_4: potentiometer_key_4 {
                        zephyr,code = <INPUT_KEY_4>;
                        press-thresholds-mv = <2887>;
                };
        };
};

&adc {
	#address-cells = <1>;
	#size-cells = <0>;

	channel@0 {/* ADC channel configuration for the potentiometer */
		reg = <0>;
		zephyr,gain = "ADC_GAIN_1";
		zephyr,reference = "ADC_REF_INTERNAL";
		zephyr,acquisition-time = <ADC_ACQ_TIME_DEFAULT>;
		zephyr,resolution = <12>;
	};
};
